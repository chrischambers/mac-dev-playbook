# Setup default preferences in macOS
- name: Prepare backup script for OSX settings
  ansible.builtin.template:
    src: backup_osx_settings.sh
    dest: "{{ ansible_env.HOME }}/bin"
    mode: "0751"

- name: Add a daily cron job @ 8am to backup OSX settings
  ansible.builtin.cron:
    name: "backup OSX setings"
    minute: "0"
    hour: "8"
    job: "{{ ansible_env.HOME }}/bin/backup_osx_settings.sh"

- name: Run backup script for OSX defaults
  ansible.builtin.command: "{{ ansible_env.HOME }}/bin/backup_osx_settings.sh"

- name: Write macOS defaults
  osx_defaults:
    domain: "{{ item.data.domain }}"
    key: "{{ item.data.key }}"
    type: "{{ item.data.type | default(omit) }}"
    array_add: "{{ item.data.array_add | default(false) }}"
    value: "{{ item.data.value | default(omit) }}"
    state: "{{ item.data.state | default(omit) }}"
  with_items:
    - "{{ osx_defaults_settings }}"
  notify: "restart macos preferences"
  # ignore_errors: true

# There are some settings, like those in /library/ that require escalated
# privileges:
- name: Write macOS defaults with escalated privileges
  osx_defaults:
    domain: "{{ item.domain }}"
    key: "{{ item.key }}"
    type: "{{ item.type | default(omit) }}"
    array_add: "{{ item.array_add | default(false) }}"
    value: "{{ item.value | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
  with_items:
    - "{{ osx_defaults_become }}"
  notify: "restart macos preferences"
  become: true
  # ignore_errors: true

# Set two dimensional dict defaults through shell commands
- name: Set two dimensional dict defaults through defaults write
  command: defaults write '{{ item.domain }}' '{{ item.key }}' -{{ item.type }} {{ item.dict_string }}
  with_items:
    - "{{ osx_defaults_dictionaries }}"
